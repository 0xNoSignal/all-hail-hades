import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useWeb3Modal } from "@web3modal/wagmi/react";
import { signTypedData } from "@wagmi/core";
import { domain, message, types } from "@/utils";
import SafeApiKit from "@safe-global/api-kit";
import { EthersAdapter } from "@safe-global/protocol-kit";
import { ethers } from "ethers";
import { useAccount } from "wagmi";
import Safe from "@safe-global/protocol-kit";
import { useEthersSigner } from "@/hooks/ethers";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const { open } = useWeb3Modal();
  const { address } = useAccount();
  const signer = useEthersSigner();

  const provider = new ethers.providers.InfuraProvider(
    "goerli",
    process.env.INFURA_API_KEY
  );

  const ethAdapter = new EthersAdapter({
    signerOrProvider: provider,
    ethers,
  });

  const safeService = new SafeApiKit({
    txServiceUrl: "https://safe-transaction-goerli.safe.global",
    ethAdapter,
  });

  const signMessageAction = async () => {
    const signature = await signTypedData({
      domain,
      message,
      primaryType: "Inheritance",
      types,
    });
  };

  const deployModuleAction = async () => {
    if (address && signer) {
      safeService.getSafesByOwner(address).then(async (res) => {
        const [firstSafe] = res.safes;

        if (!firstSafe) {
          return;
        }

        const safeSdk: Safe = await Safe.create({
          ethAdapter: ethAdapter,
          safeAddress: firstSafe,
        });

        const ethAdapterOwner2 = new EthersAdapter({
          ethers,
          signerOrProvider: signer,
        });

        const safeSdk2 = await safeSdk.connect({
          ethAdapter: ethAdapterOwner2,
          safeAddress: firstSafe,
        });

        const safeTransaction = await safeSdk2.createEnableModuleTx(
          "0xdfb72936fEACa3255D4F2d967680930158D75c42"
        );
        const txResponse = await safeSdk2.executeTransaction(safeTransaction);
        const response = await txResponse.transactionResponse?.wait();

        // console.log(safeTransaction, "safeTransaction");
        console.log(txResponse, "txResponse");
        console.log(response, "res");
      });
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.description}>
          <p>Authenitcate yourself...</p>
        </div>
        <div className={styles.grid}>
          <button onClick={() => open()}>Open Connect Modal</button>
        </div>
        <div className={styles.grid}>
          <button onClick={() => signMessageAction()}>Sign message</button>
        </div>
        <div className={styles.grid}>
          <button onClick={() => deployModuleAction()}>Add module</button>
        </div>
      </main>
    </>
  );
}
